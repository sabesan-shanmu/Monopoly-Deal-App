"""empty message

Revision ID: ce1eaeaa936f
Revises: 
Create Date: 2020-12-30 01:44:34.749191

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'ce1eaeaa936f'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('action_card',
    sa.Column('actionCardId', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('price', sa.Integer(), nullable=False),
    sa.Column('actionType', sa.Enum('DealBreaker', 'ForcedDeal', 'SlyDeal', 'JustSayNo', 'DebtCollector', 'ItsMyBirthday', 'DoubleTheRent', 'House', 'Hotel', 'PassGo', name='actiontypes'), nullable=False),
    sa.Column('transactionCost', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('actionCardId')
    )
    op.create_table('cash_card',
    sa.Column('cashCardId', sa.Integer(), nullable=False),
    sa.Column('price', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('cashCardId')
    )
    op.create_table('game',
    sa.Column('gameId', sa.Integer(), nullable=False),
    sa.Column('gamePassCode', sa.String(), nullable=False),
    sa.Column('numberOfPlayers', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('gameStatus', sa.Enum('WaitingToStart', 'InProgress', 'Completed', name='gamestatus'), nullable=False),
    sa.Column('createdUtcDate', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('gameId'),
    sa.UniqueConstraint('gameId'),
    sa.UniqueConstraint('gamePassCode'),
    sa.UniqueConstraint('name')
    )
    op.create_table('game_play_actions',
    sa.Column('gamePlayActionId', sa.Integer(), nullable=False),
    sa.Column('cardType', sa.Enum('Properties', 'Cash', 'Rent', 'Action', name='cardtypes'), nullable=False),
    sa.Column('actionType', sa.Enum('DealBreaker', 'ForcedDeal', 'SlyDeal', 'JustSayNo', 'DebtCollector', 'ItsMyBirthday', 'DoubleTheRent', 'House', 'Hotel', 'PassGo', name='actiontypes'), nullable=True),
    sa.Column('expectedGameCardLocation', sa.Enum('IsNotDrawn', 'IsOnHand', 'IsPlayedOnPropertyPile', 'IsDiscarded', 'IsPlayedOnCashPile', 'IsInPlay', name='gamecardlocationstatus'), nullable=False),
    sa.Column('moveClassification', sa.Enum('NoActionRequiredMove', 'SingleRentPlayerPaymentRequiredMove', 'MultipleRentPlayerPaymentsRequiredMove', 'GainCardsMove', 'SinglePlayerPaymentRequiredMove', 'MultiplePlayerPaymentsRequiredMove', 'CancelActionMove', 'SlyStealMove', 'ForcedTradeMove', 'DealBreakerMove', name='actionclassification'), nullable=True),
    sa.PrimaryKeyConstraint('gamePlayActionId'),
    sa.UniqueConstraint('gamePlayActionId')
    )
    op.create_table('properties_card',
    sa.Column('propertiesCardId', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('primaryColourId', sa.Enum('Any', 'Green', 'Brown', 'DarkBlue', 'LightBlue', 'Orange', 'Pink', 'Black', 'Red', 'Yellow', 'Neutral', name='colours'), nullable=False),
    sa.Column('secondaryColourId', sa.Enum('Any', 'Green', 'Brown', 'DarkBlue', 'LightBlue', 'Orange', 'Pink', 'Black', 'Red', 'Yellow', 'Neutral', name='colours'), nullable=True),
    sa.Column('price', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('propertiesCardId')
    )
    op.create_table('properties_color',
    sa.Column('colorId', sa.Enum('Any', 'Green', 'Brown', 'DarkBlue', 'LightBlue', 'Orange', 'Pink', 'Black', 'Red', 'Yellow', 'Neutral', name='colours'), nullable=False),
    sa.Column('onePairRentPrice', sa.Integer(), nullable=False),
    sa.Column('twoPairRentPrice', sa.Integer(), nullable=False),
    sa.Column('threePairRentPrice', sa.Integer(), nullable=False),
    sa.Column('fourPairRentPrice', sa.Integer(), nullable=False),
    sa.Column('numberNeededToCompleteSet', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('colorId')
    )
    op.create_table('rent_card',
    sa.Column('rentCardId', sa.Integer(), nullable=False),
    sa.Column('primaryColourId', sa.Enum('Any', 'Green', 'Brown', 'DarkBlue', 'LightBlue', 'Orange', 'Pink', 'Black', 'Red', 'Yellow', 'Neutral', name='colours'), nullable=False),
    sa.Column('secondaryColourId', sa.Enum('Any', 'Green', 'Brown', 'DarkBlue', 'LightBlue', 'Orange', 'Pink', 'Black', 'Red', 'Yellow', 'Neutral', name='colours'), nullable=True),
    sa.Column('payee', sa.Enum('Single', 'All', name='payee'), nullable=False),
    sa.Column('price', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('rentCardId')
    )
    op.create_table('cards',
    sa.Column('cardId', sa.Integer(), nullable=False),
    sa.Column('cardType', sa.Enum('Properties', 'Cash', 'Rent', 'Action', name='cardtypes'), nullable=True),
    sa.Column('propertiesCardId', sa.Integer(), nullable=True),
    sa.Column('cashCardId', sa.Integer(), nullable=True),
    sa.Column('rentCardId', sa.Integer(), nullable=True),
    sa.Column('actionCardId', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['actionCardId'], ['action_card.actionCardId'], ),
    sa.ForeignKeyConstraint(['cashCardId'], ['cash_card.cashCardId'], ),
    sa.ForeignKeyConstraint(['propertiesCardId'], ['properties_card.propertiesCardId'], ),
    sa.ForeignKeyConstraint(['rentCardId'], ['rent_card.rentCardId'], ),
    sa.PrimaryKeyConstraint('cardId'),
    sa.UniqueConstraint('cardId')
    )
    op.create_table('game_in_play_card',
    sa.Column('gameId', sa.Integer(), nullable=True),
    sa.Column('currentInPlayCardId', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['currentInPlayCardId'], ['cards.cardId'], name='fk_game_card_id', use_alter=True),
    sa.ForeignKeyConstraint(['gameId'], ['game.gameId'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('gameId')
    )
    op.create_table('game_player_moves',
    sa.Column('gameId', sa.Integer(), nullable=True),
    sa.Column('currentPlayerId', sa.Integer(), nullable=True),
    sa.Column('numberMovesPlayed', sa.Integer(), nullable=False),
    sa.Column('gameTurn', sa.Integer(), nullable=False),
    sa.Column('gameMoveStatus', sa.Enum('WaitingForPlayerToBeginMove', 'MoveInProgress', 'MoveComplete', name='gamemovestatus'), nullable=False),
    sa.ForeignKeyConstraint(['currentPlayerId'], ['player.playerId'], name='fk_game_current_player_id', ondelete='CASCADE', use_alter=True),
    sa.ForeignKeyConstraint(['gameId'], ['game.gameId'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('gameId')
    )
    op.create_table('player',
    sa.Column('playerId', sa.Integer(), nullable=False),
    sa.Column('playerPassCode', sa.String(), nullable=False),
    sa.Column('gameId', sa.Integer(), nullable=False),
    sa.Column('gamePassCode', sa.String(), nullable=False),
    sa.Column('playerName', sa.String(), nullable=True),
    sa.Column('playerGameOrder', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['gameId'], ['game.gameId'], ),
    sa.ForeignKeyConstraint(['gamePassCode'], ['game.gamePassCode'], ),
    sa.PrimaryKeyConstraint('playerId'),
    sa.UniqueConstraint('gameId', 'playerName', name='unique_player'),
    sa.UniqueConstraint('playerId')
    )
    op.create_table('rent_transaction',
    sa.Column('rentTransactionId', sa.Integer(), nullable=False),
    sa.Column('gameId', sa.Integer(), nullable=True),
    sa.Column('transactionStatus', sa.Enum('WaitingToStart', 'InProgress', 'Completed', name='gamestatus'), nullable=False),
    sa.Column('payee', sa.Enum('Single', 'All', name='payee'), nullable=False),
    sa.Column('total', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['gameId'], ['game.gameId'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('rentTransactionId'),
    sa.UniqueConstraint('rentTransactionId')
    )
    op.create_table('game_cards',
    sa.Column('gameCardId', sa.Integer(), nullable=False),
    sa.Column('gameId', sa.Integer(), nullable=True),
    sa.Column('cardId', sa.Integer(), nullable=True),
    sa.Column('playerId', sa.Integer(), nullable=True),
    sa.Column('cardStatus', sa.Enum('IsNotDrawn', 'IsOnHand', 'IsPlayedOnPropertyPile', 'IsDiscarded', 'IsPlayedOnCashPile', 'IsInPlay', name='gamecardlocationstatus'), nullable=False),
    sa.Column('isCardRightSideUp', sa.Boolean(), nullable=False),
    sa.Column('housingPrimaryColourId', sa.Enum('Any', 'Green', 'Brown', 'DarkBlue', 'LightBlue', 'Orange', 'Pink', 'Black', 'Red', 'Yellow', 'Neutral', name='colours'), nullable=True),
    sa.ForeignKeyConstraint(['cardId'], ['cards.cardId'], ),
    sa.ForeignKeyConstraint(['gameId'], ['game.gameId'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['playerId'], ['player.playerId'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('gameCardId'),
    sa.UniqueConstraint('gameCardId'),
    sa.UniqueConstraint('gameId', 'cardId', name='unique_game_card')
    )
    op.create_table('rent_payee_transaction',
    sa.Column('rentPayeeTransactionId', sa.Integer(), nullable=False),
    sa.Column('rentTransactionfId', sa.Integer(), nullable=True),
    sa.Column('playerId', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['playerId'], ['player.playerId'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['rentTransactionfId'], ['rent_transaction.rentTransactionId'], ),
    sa.PrimaryKeyConstraint('rentPayeeTransactionId'),
    sa.UniqueConstraint('rentPayeeTransactionId')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('rent_payee_transaction')
    op.drop_table('game_cards')
    op.drop_table('rent_transaction')
    op.drop_table('player')
    op.drop_table('game_player_moves')
    op.drop_table('game_in_play_card')
    op.drop_table('cards')
    op.drop_table('rent_card')
    op.drop_table('properties_color')
    op.drop_table('properties_card')
    op.drop_table('game_play_actions')
    op.drop_table('game')
    op.drop_table('cash_card')
    op.drop_table('action_card')
    # ### end Alembic commands ###
